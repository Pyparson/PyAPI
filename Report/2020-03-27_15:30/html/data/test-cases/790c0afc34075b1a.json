{
  "uid" : "790c0afc34075b1a",
  "name" : "请求接口:http://www.kuaidi100.com/query",
  "fullName" : "Case.test_api.TestApi#test_api",
  "historyId" : "4b5e810ca193f3b37c7ec8f01ce09a9e",
  "time" : {
    "start" : 1585294246747,
    "stop" : 1585294251871,
    "duration" : 5124
  },
  "description" : "用例描述:Get请求,接口为/query,测试结果应不通过",
  "descriptionHtml" : "<p>用例描述:Get请求,接口为/query,测试结果应不通过</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Test Failed!!!\nassert False",
  "statusTrace" : "self = <Case.test_api.TestApi object at 0x101d6d2e0>\nname = 'Get请求,接口为/query,测试结果应不通过', method = 'GET'\nurl = 'http://www.kuaidi100.com/query'\nheaders = {'Sec-Fetch-Dest': 'empty', 'Sec-Fetch-Site': 'same-origin', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36', 'X-Requested-With': 'XMLHttpRequest'}\nparams = {'postid': '4304190674662111', 'type': 'yunda'}\nexpected = [{'eq': ['code', 200]}, {'eq': ['headers.Content-Type', 'charset=UTF-8']}]\nexport = 'NULL'\n\n    @pytest.mark.parametrize(\"name,method, url, headers, params, expected, export\", data)\n    def test_api(self, name, method, url, headers, params, expected, export):\n        allure.dynamic.title(\"请求接口:{i}\".format(i=url))  # 设定用例标题\n        allure.dynamic.description(\"用例描述:{i}\".format(i=name))  # 设定用例描述\n        # com_flag = True    # 设置默认的断言结果\n        headers = Config.get_var(headers)    # 判断请求头中是否有变量,有的话需获取变量值\n        Log.logger(\"Request Headers:\"+str(headers))\n        params = Config.get_var(params)    # 判断请求消息体中是否有变量,有的话需获取变量值\n        Log.logger(\"Request Body:\"+str(params))\n        if method == \"GET\":\n            data = Base.base_request(url=url, method=method, headers=headers, params=params)\n        elif method == \"POST\":\n            data = Base.base_request(url=url, method=method, headers=headers, data=params)\n        Log.logger(\"Response Headers:\" + str(data.headers))\n        Log.logger(\"Response Body:\" + str(data.text))\n        if export == \"NULL\":      # 接口返回是否需要输出变量供其他接口使用\n            pass\n        else:\n            Config.set_var(path, export, data)\n        # result = Assert.assertion(data, expected)     # 校验接口返回,返回结果是一个以True或False的列表\n        # for i in result:     # 对断言\n        #     if i == False:\n        #         com_flag = False\n        #         break\n        com_flag = Assert.assertion(data,expected)\n    \n        assert data.status_code == 200, \"Test Failed!!!\"\n>       assert com_flag, \"Test Failed!!!\"\nE       AssertionError: Test Failed!!!\nE       assert False\n\n../PyAPI/Case/test_api.py:83: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "用例描述:Get请求,接口为/query,测试结果应不通过",
    "status" : "failed",
    "statusMessage" : "AssertionError: Test Failed!!!\nassert False",
    "statusTrace" : "self = <Case.test_api.TestApi object at 0x101d6d2e0>\nname = 'Get请求,接口为/query,测试结果应不通过', method = 'GET'\nurl = 'http://www.kuaidi100.com/query'\nheaders = {'Sec-Fetch-Dest': 'empty', 'Sec-Fetch-Site': 'same-origin', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36', 'X-Requested-With': 'XMLHttpRequest'}\nparams = {'postid': '4304190674662111', 'type': 'yunda'}\nexpected = [{'eq': ['code', 200]}, {'eq': ['headers.Content-Type', 'charset=UTF-8']}]\nexport = 'NULL'\n\n    @pytest.mark.parametrize(\"name,method, url, headers, params, expected, export\", data)\n    def test_api(self, name, method, url, headers, params, expected, export):\n        allure.dynamic.title(\"请求接口:{i}\".format(i=url))  # 设定用例标题\n        allure.dynamic.description(\"用例描述:{i}\".format(i=name))  # 设定用例描述\n        # com_flag = True    # 设置默认的断言结果\n        headers = Config.get_var(headers)    # 判断请求头中是否有变量,有的话需获取变量值\n        Log.logger(\"Request Headers:\"+str(headers))\n        params = Config.get_var(params)    # 判断请求消息体中是否有变量,有的话需获取变量值\n        Log.logger(\"Request Body:\"+str(params))\n        if method == \"GET\":\n            data = Base.base_request(url=url, method=method, headers=headers, params=params)\n        elif method == \"POST\":\n            data = Base.base_request(url=url, method=method, headers=headers, data=params)\n        Log.logger(\"Response Headers:\" + str(data.headers))\n        Log.logger(\"Response Body:\" + str(data.text))\n        if export == \"NULL\":      # 接口返回是否需要输出变量供其他接口使用\n            pass\n        else:\n            Config.set_var(path, export, data)\n        # result = Assert.assertion(data, expected)     # 校验接口返回,返回结果是一个以True或False的列表\n        # for i in result:     # 对断言\n        #     if i == False:\n        #         com_flag = False\n        #         break\n        com_flag = Assert.assertion(data,expected)\n    \n        assert data.status_code == 200, \"Test Failed!!!\"\n>       assert com_flag, \"Test Failed!!!\"\nE       AssertionError: Test Failed!!!\nE       assert False\n\n../PyAPI/Case/test_api.py:83: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "623a385568582264",
      "name" : "log",
      "source" : "623a385568582264.txt",
      "type" : "text/plain",
      "size" : 1722
    }, {
      "uid" : "fccb24038256fc5c",
      "name" : "stderr",
      "source" : "fccb24038256fc5c.txt",
      "type" : "text/plain",
      "size" : 1555
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "Case"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestApi"
  }, {
    "name" : "host",
    "value" : "Parsons-Mac-mini.local"
  }, {
    "name" : "thread",
    "value" : "94963-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Case.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "expected",
    "value" : "[{'eq': ['code', 200]}, {'eq': ['headers.Content-Type', 'charset=UTF-8']}]"
  }, {
    "name" : "export",
    "value" : "'NULL'"
  }, {
    "name" : "headers",
    "value" : "{'Sec-Fetch-Dest': 'empty', 'Sec-Fetch-Site': 'same-origin', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36', 'X-Requested-With': 'XMLHttpRequest'}"
  }, {
    "name" : "method",
    "value" : "'GET'"
  }, {
    "name" : "name",
    "value" : "'Get请求,接口为/query,测试结果应不通过'"
  }, {
    "name" : "params",
    "value" : "{'postid': '4304190674662111', 'type': 'yunda'}"
  }, {
    "name" : "url",
    "value" : "'http://www.kuaidi100.com/query'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "790c0afc34075b1a.json",
  "parameterValues" : [ "[{'eq': ['code', 200]}, {'eq': ['headers.Content-Type', 'charset=UTF-8']}]", "'NULL'", "{'Sec-Fetch-Dest': 'empty', 'Sec-Fetch-Site': 'same-origin', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36', 'X-Requested-With': 'XMLHttpRequest'}", "'GET'", "'Get请求,接口为/query,测试结果应不通过'", "{'postid': '4304190674662111', 'type': 'yunda'}", "'http://www.kuaidi100.com/query'" ]
}